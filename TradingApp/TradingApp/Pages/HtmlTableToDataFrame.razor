@page "/"
@using System.Globalization

@inject IHttpClientFactory ClientFactory

<h3>HtmlTableToDataFrame</h3>

@code {
    private string _baseUrl = "https://www.sec.gov/Archives/edgar/data/1265107/000126510719000004/";
    private string _urlSummary = "https://www.sec.gov/Archives/edgar/data/1265107/000126510719000004/FilingSummary.xml";

    private XmlSerializer _mySerializer = new XmlSerializer(typeof(FilingSummary));
    private string[] _neededReportsDiffNames =
        {"consolidated balance sheets", "consolidated statements of operations and comprehensive income (loss)",
        "consolidated statement of income", "consolidated statements of cash flows",
        "consolidated statements of income", "consolidated statements of operations",
        "consolidated balance sheet", "statements of cash flows", "consolidated statements of operations and comprehensive income",
        "consolidated statements of operations and comprehensive (loss) income", "balance sheet", "statement of operations",
        "statement of cash flows", "balance sheets", "statements of operations"};


    private List<ReportModel> _reports = new List<ReportModel>();

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient();

        var request = new HttpRequestMessage(HttpMethod.Get,_urlSummary);
        request.Headers.TryAddWithoutValidation("User-Agent", "georgi.zhekov3@gmail.com");

        var response = await client.SendAsync(request);

        FilingSummary filingsSummaryData;

        if (response.IsSuccessStatusCode)
        {
            try
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                filingsSummaryData = (FilingSummary)_mySerializer.Deserialize(responseStream);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.GetBaseException());
                return;
            }

            foreach(var report in filingsSummaryData.MyReports.Reports)
            {
                if (_neededReportsDiffNames.Contains(report.ShortName.ToLower()))
                {
                    var currentReport = new ReportModel
                    {
                        ShortName = report.ShortName,
                        LongName = report.LongName,
                        Position = report.Position,
                        Category = report.MenuCategory,
                        Url = _baseUrl + report.HtmlFileName
                    };

                    _reports.Add(currentReport);
                }
            }

            foreach(var filteredReport in _reports)
            {
                HtmlWeb web = new HtmlWeb();
                web.UserAgent = "georgi.zhekov3@gmail.com";
                var htmlDoc = web.Load(filteredReport.Url);

                var query = from table in htmlDoc.DocumentNode.SelectNodes("//table").Cast<HtmlNode>()
                            from row in table.SelectNodes("tr").Cast<HtmlNode>()
                            from cell in row.SelectNodes("th|td").Cast<HtmlNode>()
                            select new {Table = table.Id, CellText = cell.InnerText};

                foreach(var cell in query)
                {
                    string formatted = cell.CellText;

                    //Infortmation beyond "X" is not needed
                    if (formatted == "X")
                    {
                        break;
                    }

                    //Remove '$' sign, replace '()' with '-' and '&#160;'(check if in other companies documents there is the same symbol) with 'null'
                    formatted = formatted.Replace("$", "");
                    formatted = formatted.Replace("(", "-").Replace(")", "");
                    formatted = formatted.Replace(".", "");
                    formatted = formatted.Replace("&#160;", "null");

                    if(formatted == " ")
                    {
                        formatted = formatted.Replace(" ", "null");
                    }

                    if (double.TryParse(formatted, out double parsedNumber) && formatted.Contains(" "))
                    {
                        formatted = formatted.Replace(" ", "");
                    }

                    if (DateTime.TryParseExact(formatted, "MMM dd, yyyy", new CultureInfo("en-US"), DateTimeStyles.None, out DateTime result))
                    {
                        Console.WriteLine("it is date");
                    }

                    Console.WriteLine("{0}", formatted);
                    
                }
            }

        }
    }
}
